###
## for local dev, wait for db to pass healthcheck before we start node
## also, build custom dockerfile to the dev stage
###

# version key is DEPRECATED
# v2 and v3 features now combined in compose CLI
services:
  api:
    container_name: nodejs-api-boilerplate-api
    build:
      context: .
        # build to the stage named dev
      target: dev
    ports:
      - "3000:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - .:/app
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker compose down" and will
      # be saved on host for next build.
      # remember to intall from the parent directory to the code bind-mount:
      # docker compose exec -w /opt/node_app node npm install --save bower
      - ./package.json:/package.json
      - ./package-lock.json:/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/app/node_modules
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/images-dev
      - PORT=3000
      - LOG_DEST=./logs/error.log
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      disable: true
  mongo:
    container_name: nodejs-api-boilerplate-mongo
    image: mongo:4.4
    ports:
      - "27017:27017"
    healthcheck:
      test: "[ `echo 'db.runCommand(\"ping\").ok' | mongo localhost/images-dev --quiet` ] && echo 0 || echo 1"
      interval: 5s
      start_period: 10s
      timeout: 4s
      retries: 3

volumes:
  notused:

networks:
  default:
    name: nodejs-api-boilerplate
