#!/usr/bin/env node
/* eslint-disable no-console */
const http = require('http');
const mongoose = require('mongoose');
const { createTerminus } = require('@godaddy/terminus');
const app = require('../app');
const config = require('../config');
const { handleError, isOperationalError } = require('../errorHandler');
const logger = require('../logger');

const { port, host } = config.app;

/**
 * ODM initialization.
 */
mongoose
  .connect(config.db.connectionString, config.db.connectionOptions)
  .then(() => {
    const server = http.createServer(app);
    createTerminus(server, { signals: ['SIGTERM', 'SIGINT'] });

    server.listen(port);
    console.log(`server running at http://${host}:${port}`);

    mongoose.connection.on('error', console.error);
  })
  .catch((err) => {
    logger.error(err);
  });

process.on('unhandledRejection', (err) => {
  // since we already have fallback handler for unhandled errors (see below),
  // let throw and let him handle that
  throw err;
});

process.on('uncaughtException', (err) => {
  const operational = isOperationalError(err);
  handleError(err);

  if (!operational) process.emit('SIGTERM');
});
