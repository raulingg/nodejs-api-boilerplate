#!/usr/bin/env node
/* eslint-disable no-console */
const http = require('http');
const mongoose = require('mongoose');
const { createTerminus } = require('@godaddy/terminus');
const app = require('../app');
const config = require('../config');

const { errorHandler } = require('../utils');

const {port, host } = config.app;

/**
 * ODM initialization.
 */
mongoose
  .connect(config.db.connectionString, config.db.connectionOptions)
  .then(()=> console.log(`DB connected`))
  .catch(console.error);

mongoose.connection
  .on('error', console.error)
  .on('')

const server = http.createServer(app);

createTerminus(server, {
  signals: ['SIGTERM', 'SIGINT'],
});

console.log(`server running at http://${host}:${port}`);
server.listen(port);

process.on('unhandledRejection', (err) => {
  // since we already have fallback handler for unhandled errors (see below),
  // let throw and let him handle that
  throw err;
});

process.on('uncaughtException', (err) => {
  const isOperational = errorHandler.handleError(err);

  if (!isOperational) process.emit('SIGINT');
});
